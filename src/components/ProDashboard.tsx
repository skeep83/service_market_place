import React, { useState } from 'react';
import { Profile } from '../types/database';
import { useTranslation } from '../hooks/useTranslation';
import { BidModal } from './BidModal';
import { JobApplicationModal } from './JobApplicationModal';
import { PhotoModal } from './PhotoModal';
import { ChatModal } from './ChatModal';

interface ProDashboardProps {
  user: Profile;
}

interface Job {
  id: string;
  title: string;
  category: string;
  description: string;
  budget_min: number;
  budget_max: number;
  location: string;
  distance: string;
  created_at: string;
  urgent: boolean;
  photos?: string[];
}

interface Tender {
  id: string;
  title: string;
  category: string;
  description: string;
  budget_hint: number;
  location: string;
  created_at: string;
  deadline: string;
  bids_count: number;
  photos?: string[];
}

interface MyJob {
  id: string;
  title: string;
  client: string;
  status: 'accepted' | 'in_progress' | 'done';
  price: number;
  created_at: string;
  deadline?: string;
}

export function ProDashboard({ user }: ProDashboardProps) {
  const { t } = useTranslation();
  const [activeTab, setActiveTab] = useState<'overview' | 'jobs' | 'tenders' | 'wallet' | 'profile'>('overview');
  const [selectedJob, setSelectedJob] = useState<Job | null>(null);
  const [selectedTender, setSelectedTender] = useState<Tender | null>(null);
  const [showBidModal, setShowBidModal] = useState(false);
  const [showApplicationModal, setShowApplicationModal] = useState(false);
  const [photoModal, setPhotoModal] = useState<{ photos: string[]; currentIndex: number } | null>(null);
  const [showChatModal, setShowChatModal] = useState(false);

  // Mock data –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
  const availableJobs: Job[] = [
    {
      id: '1',
      title: t.language === 'ro' ? 'ReparƒÉ robinetul care curge din bucƒÉtƒÉrie' : '–ü–æ—á–∏–Ω–∏—Ç—å –ø—Ä–æ—Ç–µ–∫–∞—é—â–∏–π –∫—Ä–∞–Ω –Ω–∞ –∫—É—Ö–Ω–µ',
      category: 'plumbing',
      description: t.language === 'ro' ? 'Robinetul din bucƒÉtƒÉrie curge de o sƒÉptƒÉm√¢nƒÉ, trebuie reparat urgent. Posibil sƒÉ fie nevoie de √Ænlocuirea garniturilor sau a robinetului.' : '–ö—Ä–∞–Ω –Ω–∞ –∫—É—Ö–Ω–µ –ø—Ä–æ—Ç–µ–∫–∞–µ—Ç —É–∂–µ –Ω–µ–¥–µ–ª—é, –Ω—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–∫–ª–∞–¥–æ–∫ –∏–ª–∏ —Å–∞–º–æ–≥–æ –∫—Ä–∞–Ω–∞.',
      budget_min: 200,
      budget_max: 500,
      location: t.language === 'ro' ? 'Centru, Chi»ôinƒÉu' : '–¶–µ–Ω—Ç—Ä, –ö–∏—à–∏–Ω–µ–≤',
      distance: t.language === 'ro' ? '2.3 km' : '2.3 –∫–º',
      created_at: '2025-01-14T10:00:00Z',
      urgent: true,
      photos: [
        'https://images.pexels.com/photos/1108572/pexels-photo-1108572.jpeg?auto=compress&cs=tinysrgb&w=800',
        'https://images.pexels.com/photos/1108101/pexels-photo-1108101.jpeg?auto=compress&cs=tinysrgb&w=800'
      ]
    },
    {
      id: '2',
      title: t.language === 'ro' ? 'CurƒÉ»õenie generalƒÉ apartament 2 camere' : '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ 2-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã',
      category: 'cleaning',
      description: t.language === 'ro' ? 'Este necesarƒÉ curƒÉ»õenie generalƒÉ pentru apartament de 60 mp. Inclusiv spƒÉlarea geamurilor, curƒÉ»õenia bucƒÉtƒÉriei »ôi bƒÉii.' : '–ù—É–∂–Ω–∞ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã 60 –∫–≤.–º. –í–∫–ª—é—á–∞—è –º—ã—Ç—å–µ –æ–∫–æ–Ω, —É–±–æ—Ä–∫—É –∫—É—Ö–Ω–∏ –∏ –≤–∞–Ω–Ω–æ–π.',
      budget_min: 800,
      budget_max: 1200,
      location: t.language === 'ro' ? 'Botanica, Chi»ôinƒÉu' : '–ë–æ—Ç–∞–Ω–∏–∫–∞, –ö–∏—à–∏–Ω–µ–≤',
      distance: t.language === 'ro' ? '5.1 km' : '5.1 –∫–º',
      created_at: '2025-01-13T14:30:00Z',
      urgent: false,
      photos: [
        'https://images.pexels.com/photos/4239146/pexels-photo-4239146.jpeg?auto=compress&cs=tinysrgb&w=800'
      ]
    },
    {
      id: '3',
      title: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ä–æ–∑–µ—Ç–æ–∫ –≤ —Å–ø–∞–ª—å–Ω–µ',
      category: 'electrical',
      description: '–ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 4 –Ω–æ–≤—ã–µ —Ä–æ–∑–µ—Ç–∫–∏ –≤ —Å–ø–∞–ª—å–Ω–µ. –ü—Ä–æ–≤–æ–¥–∫–∞ —É–∂–µ –ø—Ä–æ–ª–æ–∂–µ–Ω–∞, –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞.',
      budget_min: 300,
      budget_max: 600,
      location: '–†—ã—à–∫–∞–Ω–æ–≤–∫–∞, –ö–∏—à–∏–Ω–µ–≤',
      distance: '7.8 –∫–º',
      created_at: '2025-01-12T09:15:00Z',
      urgent: false,
      photos: [
        'https://images.pexels.com/photos/257736/pexels-photo-257736.jpeg?auto=compress&cs=tinysrgb&w=800',
        'https://images.pexels.com/photos/162553/keys-workshop-mechanic-tools-162553.jpeg?auto=compress&cs=tinysrgb&w=800'
      ]
    }
  ];

  const availableTenders: Tender[] = [
    {
      id: '1',
      title: '–ü–æ–∫—Ä–∞—Å–∫–∞ —Ñ–∞—Å–∞–¥–∞ —á–∞—Å—Ç–Ω–æ–≥–æ –¥–æ–º–∞',
      category: 'painting',
      description: '–ü–æ–∫—Ä–∞—Å–∫–∞ —Ñ–∞—Å–∞–¥–∞ –¥–æ–º–∞ 120 –∫–≤.–º, –≤–∫–ª—é—á–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –≥—Ä—É–Ω—Ç–æ–≤–∫—É –∏ –ø–æ–∫—Ä–∞—Å–∫—É –≤ 2 —Å–ª–æ—è.',
      budget_hint: 5000,
      location: '–î—É—Ä–ª–µ—à—Ç—ã',
      created_at: '2025-01-12T16:00:00Z',
      deadline: '2025-01-20T23:59:59Z',
      bids_count: 7,
      photos: [
        'https://images.pexels.com/photos/1396122/pexels-photo-1396122.jpeg?auto=compress&cs=tinysrgb&w=800',
        'https://images.pexels.com/photos/1396132/pexels-photo-1396132.jpeg?auto=compress&cs=tinysrgb&w=800'
      ]
    },
    {
      id: '2',
      title: '–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω –ø—Ä–∏—É—Å–∞–¥–µ–±–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞',
      category: 'gardening',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ —É—á–∞—Å—Ç–∫–∞ 10 —Å–æ—Ç–æ–∫ —Å –ø–æ—Å–∞–¥–∫–æ–π —Ä–∞—Å—Ç–µ–Ω–∏–π, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –≥–∞–∑–æ–Ω–∞ –∏ –¥–æ—Ä–æ–∂–µ–∫.',
      budget_hint: 8000,
      location: '–í–∞—Ç—Ä–∞',
      created_at: '2025-01-10T11:20:00Z',
      deadline: '2025-01-25T23:59:59Z',
      bids_count: 12,
      photos: [
        'https://images.pexels.com/photos/1105019/pexels-photo-1105019.jpeg?auto=compress&cs=tinysrgb&w=800'
      ]
    }
  ];

  const myJobs: MyJob[] = [
    {
      id: '1',
      title: '–ó–∞–º–µ–Ω–∞ –≤–æ–¥–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—è',
      client: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
      status: 'in_progress',
      price: 800,
      created_at: '2025-01-13T10:00:00Z',
      deadline: '2025-01-16T18:00:00Z'
    },
    {
      id: '2',
      title: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ—Å–∏—Ç–µ–ª—è –≤ –≤–∞–Ω–Ω–æ–π',
      client: '–ê–Ω–¥—Ä–µ–π –ö–æ–∑–ª–æ–≤',
      status: 'done',
      price: 350,
      created_at: '2025-01-10T14:30:00Z'
    }
  ];

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusColor = (status: string) => {
    const colors = {
      accepted: 'bg-blue-100 text-blue-800',
      in_progress: 'bg-purple-100 text-purple-800',
      done: 'bg-green-100 text-green-800'
    };
    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  const getStatusText = (status: string) => {
    const statusTexts = {
      accepted: '–ü—Ä–∏–Ω—è—Ç–∞',
      in_progress: '–í —Ä–∞–±–æ—Ç–µ',
      done: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
    };
    return statusTexts[status as keyof typeof statusTexts] || status;
  };

  const getCategoryIcon = (category: string) => {
    const icons = {
      plumbing: 'üîß',
      electrical: '‚ö°',
      cleaning: 'üßπ',
      locksmith: 'üîê',
      painting: 'üé®',
      gardening: 'üå±',
      moving: 'üì¶',
      repair: 'üõ†Ô∏è'
    };
    return icons[category as keyof typeof icons] || 'üîß';
  };

  const openPhotoModal = (photos: string[], index: number = 0) => {
    setPhotoModal({ photos, currentIndex: index });
  };

  const closePhotoModal = () => {
    setPhotoModal(null);
  };

  const nextPhoto = () => {
    if (photoModal) {
      setPhotoModal({
        ...photoModal,
        currentIndex: (photoModal.currentIndex + 1) % photoModal.photos.length
      });
    }
  };

  const prevPhoto = () => {
    if (photoModal) {
      setPhotoModal({
        ...photoModal,
        currentIndex: photoModal.currentIndex === 0 ? photoModal.photos.length - 1 : photoModal.currentIndex - 1
      });
    }
  };

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">{t.dashboard.welcomeBack}, {user.full_name}!</h1>
        <p className="text-gray-600 mt-2">–ù–∞—Ö–æ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –±–∏–∑–Ω–µ—Å–æ–º</p>
        <div className="flex items-center mt-3">
          <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800">
            üîß –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
          </span>
          <div className="ml-4 flex items-center space-x-4 text-sm text-gray-500">
            <span className="flex items-center">
              ‚≠ê {user.rating} —Ä–µ–π—Ç–∏–Ω–≥
            </span>
            <span className="flex items-center">
              ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω
            </span>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200 mb-8">
        <nav className="-mb-px flex space-x-8">
          {[
            { key: 'overview', label: '–û–±–∑–æ—Ä', icon: 'üìä' },
            { key: 'jobs', label: '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', icon: 'üîß' },
            { key: 'tenders', label: '–¢–µ–Ω–¥–µ—Ä—ã', icon: 'üéØ' },
            { key: 'messages', label: '–°–æ–æ–±—â–µ–Ω–∏—è', icon: 'üí¨' },
            { key: 'wallet', label: '–ö–æ—à–µ–ª–µ–∫', icon: 'üí∞' },
            { key: 'profile', label: '–ü—Ä–æ—Ñ–∏–ª—å', icon: 'üë§' }
          ].map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key as any)}
              className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                activeTab === tab.key
                  ? 'border-purple-500 text-purple-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <span>{tab.icon}</span>
              <span>{tab.label}</span>
            </button>
          ))}
        </nav>
      </div>

      {/* Overview Tab */}
      {activeTab === 'overview' && (
        <div className="space-y-8">
          {/* Stats */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                    <span className="text-2xl">üîß</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</p>
                  <p className="text-2xl font-bold text-gray-900">{myJobs.filter(j => j.status !== 'done').length}</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                    <span className="text-2xl">‚úÖ</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</p>
                  <p className="text-2xl font-bold text-gray-900">{myJobs.filter(j => j.status === 'done').length}</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                    <span className="text-2xl">üéØ</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">–î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–±–æ—Ç</p>
                  <p className="text-2xl font-bold text-gray-900">{availableJobs.length}</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                    <span className="text-2xl">üí∞</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</p>
                  <p className="text-2xl font-bold text-gray-900">3,200 –ª–µ–π</p>
                </div>
              </div>
            </div>
          </div>

          {/* My Active Jobs */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</h3>
            <div className="space-y-4">
              {myJobs.filter(job => job.status !== 'done').map((job) => (
                <div key={job.id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900">{job.title}</h4>
                    <p className="text-sm text-gray-600">–ö–ª–∏–µ–Ω—Ç: {job.client}</p>
                    <p className="text-sm text-gray-500">–°–æ–∑–¥–∞–Ω–æ: {formatDate(job.created_at)}</p>
                  </div>
                  <div className="flex items-center space-x-4">
                    <span className={`px-3 py-1 text-xs font-medium rounded-full ${getStatusColor(job.status)}`}>
                      {getStatusText(job.status)}
                    </span>
                    {(job.status === 'accepted' || job.status === 'in_progress') && (
                      <button 
                        onClick={() => setShowChatModal(true)}
                        className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded-lg text-sm font-medium transition-colors"
                      >
                        üí¨ –ß–∞—Ç
                      </button>
                    )}
                    <span className="font-bold text-gray-900">{job.price} –ª–µ–π</span>
                  </div>
                </div>
              ))}
              {myJobs.filter(job => job.status !== 'done').length === 0 && (
                <p className="text-gray-500 text-center py-8">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç</p>
              )}
            </div>
          </div>

          {/* Recent Activity */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
            <div className="space-y-4">
              {[
                { type: 'job_completed', message: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ—Å–∏—Ç–µ–ª—è', time: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥', icon: '‚úÖ' },
                { type: 'bid_submitted', message: '–ü–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä –ø–æ–∫—Ä–∞—Å–∫–∏', time: '4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥', icon: 'üéØ' },
                { type: 'job_started', message: '–ù–∞—á–∞—Ç–∞ –∑–∞–º–µ–Ω–∞ –≤–æ–¥–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—è', time: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥', icon: 'üîß' },
                { type: 'payment_received', message: '–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂ –∑–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã', time: '2 –¥–Ω—è –Ω–∞–∑–∞–¥', icon: 'üí∞' }
              ].map((activity, index) => (
                <div key={index} className="flex items-center space-x-3 py-2">
                  <span className="text-2xl">{activity.icon}</span>
                  <div className="flex-1">
                    <p className="text-sm text-gray-900">{activity.message}</p>
                    <p className="text-xs text-gray-500">{activity.time}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Available Jobs Tab */}
      {activeTab === 'jobs' && (
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold text-gray-900">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ</h2>
            <div className="flex space-x-3">
              <select className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500">
                <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                <option value="plumbing">–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞</option>
                <option value="electrical">–≠–ª–µ–∫—Ç—Ä–∏–∫–∞</option>
                <option value="cleaning">–£–±–æ—Ä–∫–∞</option>
                <option value="painting">–ü–æ–∫—Ä–∞—Å–∫–∞</option>
              </select>
            </div>
          </div>

          <div className="grid gap-6">
            {availableJobs.map((job) => (
              <div key={job.id} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <span className="text-2xl">{getCategoryIcon(job.category)}</span>
                      <h3 className="text-lg font-semibold text-gray-900">{job.title}</h3>
                      {job.urgent && (
                        <span className="px-2 py-1 text-xs font-bold bg-red-100 text-red-800 rounded-full">
                          –°–†–û–ß–ù–û
                        </span>
                      )}
                    </div>
                    <p className="text-gray-600 mb-3">{job.description}</p>
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <span>üìç {job.location} ({job.distance})</span>
                      <span>üìÖ {formatDate(job.created_at)}</span>
                      <span className="font-medium text-green-600">üí∞ {job.budget_min}-{job.budget_max} –ª–µ–π</span>
                    </div>
                  </div>
                </div>

                {job.photos && job.photos.length > 0 && (
                  <div className="mb-4">
                    <p className="text-sm font-medium text-gray-700 mb-2">–§–æ—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</p>
                    <div className="flex space-x-2">
                      {job.photos.slice(0, 3).map((photo, index) => (
                        <img
                          key={index}
                          src={photo}
                          alt={`–§–æ—Ç–æ ${index + 1}`}
                          className="w-16 h-16 object-cover rounded-lg cursor-pointer hover:opacity-80 transition-opacity"
                          onClick={() => openPhotoModal(job.photos!, index)}
                          onError={(e) => {
                            console.error('Failed to load photo:', photo);
                            e.currentTarget.style.display = 'none';
                          }}
                        />
                      ))}
                      {job.photos.length > 3 && (
                        <div 
                          className="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center text-xs text-gray-500 cursor-pointer hover:bg-gray-200 transition-colors"
                          onClick={() => openPhotoModal(job.photos!, 3)}
                        >
                          +{job.photos.length - 3}
                        </div>
                      )}
                    </div>
                  </div>
                )}

                <div className="flex space-x-3">
                  <button 
                    onClick={() => {
                      setSelectedJob(job);
                      setShowApplicationModal(true);
                    }}
                    className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                  >
                    –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
                  </button>
                  <button className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-medium transition-colors">
                    –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Tenders Tab */}
      {activeTab === 'tenders' && (
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold text-gray-900">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã</h2>
            <p className="text-gray-600">–î–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ —Ä–∞–±–æ—Ç—ã</p>
          </div>

          <div className="grid gap-6">
            {availableTenders.map((tender) => (
              <div key={tender.id} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <span className="text-2xl">{getCategoryIcon(tender.category)}</span>
                      <h3 className="text-lg font-semibold text-gray-900">{tender.title}</h3>
                    </div>
                    <p className="text-gray-600 mb-3">{tender.description}</p>
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <span>üìç {tender.location}</span>
                      <span>üìÖ {formatDate(tender.created_at)}</span>
                      <span>‚è∞ –î–æ {formatDate(tender.deadline)}</span>
                      <span className="font-medium text-purple-600">üí∞ ~{tender.budget_hint} –ª–µ–π</span>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-sm text-gray-500">{tender.bids_count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</p>
                  </div>
                </div>

                {tender.photos && tender.photos.length > 0 && (
                  <div className="mb-4">
                    <p className="text-sm font-medium text-gray-700 mb-2">–§–æ—Ç–æ –ø—Ä–æ–µ–∫—Ç–∞:</p>
                    <div className="flex space-x-2">
                      {tender.photos.slice(0, 3).map((photo, index) => (
                        <img
                          key={index}
                          src={photo}
                          alt={`–§–æ—Ç–æ ${index + 1}`}
                          className="w-16 h-16 object-cover rounded-lg cursor-pointer hover:opacity-80 transition-opacity"
                          onClick={() => openPhotoModal(tender.photos!, index)}
                          onError={(e) => {
                            console.error('Failed to load photo:', photo);
                            e.currentTarget.style.display = 'none';
                          }}
                        />
                      ))}
                      {tender.photos.length > 3 && (
                        <div 
                          className="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center text-xs text-gray-500 cursor-pointer hover:bg-gray-200 transition-colors"
                          onClick={() => openPhotoModal(tender.photos!, 3)}
                        >
                          +{tender.photos.length - 3}
                        </div>
                      )}
                    </div>
                  </div>
                )}

                <div className="flex space-x-3">
                  <button 
                    onClick={() => {
                      setSelectedTender(tender);
                      setShowBidModal(true);
                    }}
                    className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200 cursor-pointer hover:scale-105 active:scale-95 shadow-md hover:shadow-lg"
                    style={{ 
                      pointerEvents: 'auto',
                      zIndex: 9999,
                      position: 'relative'
                    }}
                  >
                    –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                  </button>
                  <button 
                    onClick={() => {
                      alert(`–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç–µ–Ω–¥–µ—Ä–∞: ${tender.title}\n–ë—é–¥–∂–µ—Ç: ~${tender.budget_hint} –ª–µ–π\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${tender.bids_count}\n–î–µ–¥–ª–∞–π–Ω: ${formatDate(tender.deadline)}`);
                    }}
                    className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-medium transition-all duration-200 cursor-pointer hover:scale-105 active:scale-95 shadow-md hover:shadow-lg"
                    style={{ 
                      pointerEvents: 'auto',
                      zIndex: 9999,
                      position: 'relative'
                    }}
                  >
                    –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Messages Tab */}
      {activeTab === 'messages' && (
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold text-gray-900">–°–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏</h2>
            <button 
              onClick={() => setShowChatModal(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
            >
              üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç—ã
            </button>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center">
            <svg className="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">–ß–∞—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏</h3>
            <p className="text-gray-600 mb-4">
              –ß–∞—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –∏–ª–∏ –≤—ã–∏–≥—Ä—ã—à–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤
            </p>
            <button 
              onClick={() => setShowChatModal(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
            >
              –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç—ã
            </button>
          </div>
        </div>
      )}

      {/* Wallet Tab */}
      {activeTab === 'wallet' && (
        <div className="space-y-6">
          <h2 className="text-xl font-semibold text-gray-900">–ö–æ—à–µ–ª–µ–∫</h2>
          
          {/* Balance Card */}
          <div className="bg-gradient-to-r from-purple-500 to-indigo-600 rounded-2xl p-6 text-white">
            <h3 className="text-lg font-semibold mb-2">–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞</h3>
            <p className="text-3xl font-bold mb-4">2,450 –ª–µ–π</p>
            <div className="flex space-x-4">
              <button className="bg-white text-purple-600 px-4 py-2 rounded-lg font-medium hover:bg-purple-50 transition-colors">
                –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
              </button>
              <button className="bg-purple-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-purple-700 transition-colors border border-white/20">
                –ò—Å—Ç–æ—Ä–∏—è
              </button>
            </div>
          </div>

          {/* Pending Earnings */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">–û–∂–∏–¥–∞—é—â–∏–µ –¥–æ—Ö–æ–¥—ã</h3>
            <div className="flex items-center justify-between mb-4">
              <span className="text-gray-600">–û—Ç —Ç–µ–∫—É—â–∏—Ö —Ä–∞–±–æ—Ç</span>
              <span className="text-xl font-bold text-gray-900">800 –ª–µ–π</span>
            </div>
            <p className="text-sm text-gray-500">–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã</p>
          </div>

          {/* Recent Transactions */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h3>
            <div className="space-y-4">
              {[
                { type: 'earning', description: '–û–ø–ª–∞—Ç–∞ –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–º–µ—Å–∏—Ç–µ–ª—è', amount: +350, date: '2025-01-10' },
                { type: 'fee', description: '–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (5%)', amount: -17.5, date: '2025-01-10' },
                { type: 'earning', description: '–û–ø–ª–∞—Ç–∞ –∑–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã', amount: +600, date: '2025-01-08' },
                { type: 'withdrawal', description: '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—É', amount: -1000, date: '2025-01-05' }
              ].map((transaction, index) => (
                <div key={index} className="flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0">
                  <div className="flex items-center space-x-3">
                    <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                      transaction.type === 'earning' ? 'bg-green-100 text-green-600' :
                      transaction.type === 'fee' ? 'bg-red-100 text-red-600' :
                      'bg-blue-100 text-blue-600'
                    }`}>
                      {transaction.type === 'earning' ? 'üí∞' : 
                       transaction.type === 'fee' ? 'üìä' : 'üè¶'}
                    </div>
                    <div>
                      <p className="font-medium text-gray-900">{transaction.description}</p>
                      <p className="text-sm text-gray-500">{new Date(transaction.date).toLocaleDateString('ru-RU')}</p>
                    </div>
                  </div>
                  <span className={`font-bold ${transaction.amount > 0 ? 'text-green-600' : 'text-red-600'}`}>
                    {transaction.amount > 0 ? '+' : ''}{transaction.amount} –ª–µ–π
                  </span>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Profile Tab */}
      {activeTab === 'profile' && (
        <div className="space-y-6">
          <h2 className="text-xl font-semibold text-gray-900">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å</h2>
          
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-6">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div className="space-y-6">
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">–ü–æ–ª–Ω–æ–µ –∏–º—è</label>
                  <input
                    type="text"
                    defaultValue={user.full_name || ''}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                  <input
                    type="tel"
                    defaultValue={user.phone || ''}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥</label>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  {[
                    { key: 'plumbing', label: '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞' },
                    { key: 'electrical', label: '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞' },
                    { key: 'cleaning', label: '–£–±–æ—Ä–∫–∞' },
                    { key: 'painting', label: '–ü–æ–∫—Ä–∞—Å–∫–∞' },
                    { key: 'locksmith', label: '–°–ª–µ—Å–∞—Ä—å' },
                    { key: 'gardening', label: '–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ' },
                    { key: 'moving', label: '–ü–µ—Ä–µ–µ–∑–¥' },
                    { key: 'repair', label: '–†–µ–º–æ–Ω—Ç' }
                  ].map((category) => (
                    <label key={category.key} className="flex items-center">
                      <input 
                        type="checkbox" 
                        defaultChecked={category.key === 'plumbing'}
                        className="rounded border-gray-300 text-purple-600 focus:ring-purple-500" 
                      />
                      <span className="ml-2 text-sm text-gray-700">{category.label}</span>
                    </label>
                  ))}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–†–∞–¥–∏—É—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (–∫–º)</label>
                <input
                  type="number"
                  defaultValue="20"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                />
                <p className="text-xs text-gray-500 mt-1">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è</label>
                <textarea
                  rows={4}
                  defaultValue="–û–ø—ã—Ç–Ω—ã–π —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫ —Å 8-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ —Ä–µ–º–æ–Ω—Ç–µ —Å–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ç–µ—á–µ–∫, –∑–∞–º–µ–Ω–µ —Ç—Ä—É–±. –†–∞–±–æ—Ç–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤ —Å—Ä–æ–∫."
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞–º –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ..."
                />
              </div>

              <div className="flex space-x-4">
                <button className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                  –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                </button>
              </div>
            </div>
          </div>

          {/* Verification Status */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-6">–°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</h3>
            <div className="space-y-4">
              <div className="flex items-center justify-between p-4 border border-green-200 rounded-lg bg-green-50">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                    </svg>
                  </div>
                  <div>
                    <p className="font-medium text-green-900">–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏</p>
                    <p className="text-sm text-green-700">–î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã</p>
                  </div>
                </div>
                <span className="text-green-600 font-medium">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</span>
              </div>

              <div className="flex items-center justify-between p-4 border border-yellow-200 rounded-lg bg-yellow-50">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div>
                    <p className="font-medium text-yellow-900">–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏</p>
                    <p className="text-sm text-yellow-700">–í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏</p>
                  </div>
                </div>
                <span className="text-yellow-600 font-medium">–í –æ–∂–∏–¥–∞–Ω–∏–∏</span>
              </div>

              <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-gray-400 rounded-full flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                    </svg>
                  </div>
                  <div>
                    <p className="font-medium text-gray-900">–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ</p>
                    <p className="text-sm text-gray-600">–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ</p>
                  </div>
                </div>
                <button className="text-purple-600 hover:text-purple-800 font-medium">–ü–æ–¥–∫–ª—é—á–∏—Ç—å</button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modals */}
      {showBidModal && selectedTender && (
        <BidModal
          tenderId={selectedTender.id}
          onClose={() => {
            setShowBidModal(false);
            setSelectedTender(null);
          }}
          onSubmit={(bidData) => {
            console.log('Submitting bid:', bidData);
            setShowBidModal(false);
            setSelectedTender(null);
          }}
        />
      )}

      {showApplicationModal && selectedJob && (
        <JobApplicationModal
          jobId={selectedJob.id}
          onClose={() => {
            setShowApplicationModal(false);
            setSelectedJob(null);
          }}
          onSubmit={(applicationData) => {
            console.log('Submitting application:', applicationData);
            setShowApplicationModal(false);
            setSelectedJob(null);
          }}
        />
      )}

      {photoModal && (
        <PhotoModal
          photos={photoModal.photos}
          currentIndex={photoModal.currentIndex}
          onClose={closePhotoModal}
          onNext={nextPhoto}
          onPrev={prevPhoto}
        />
      )}

      {/* Chat Modal */}
      {showChatModal && (
        <ChatModal 
          user={user}
          onClose={() => setShowChatModal(false)}
        />
      )}
    </div>
  );
}