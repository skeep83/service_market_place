import { useState, useCallback, useEffect } from 'react';
import { translations, Translation } from '../i18n/translations';

type Language = 'ro' | 'ru';

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è–∑—ã–∫–∞
let globalLanguage: Language = 'ro';
const listeners: Set<() => void> = new Set();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
const notifyListeners = () => {
  listeners.forEach(listener => listener());
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
const setGlobalLanguage = (lang: Language) => {
  console.log('üåç Setting global language to:', lang);
  globalLanguage = lang;
  localStorage.setItem('language', lang);
  notifyListeners();
};

export function useTranslation() {
  const [language, setLanguage] = useState<Language>(() => {
    const saved = localStorage.getItem('language');
    const initial = (saved as Language) || 'ro';
    globalLanguage = initial;
    return initial;
  });

  const [, forceUpdate] = useState({});

  useEffect(() => {
    const listener = () => {
      console.log('üîÑ Language changed to:', globalLanguage);
      setLanguage(globalLanguage);
      forceUpdate({});
    };
    
    listeners.add(listener);
    return () => listeners.delete(listener);
  }, []);

  const switchLanguage = useCallback((lang: Language) => {
    console.log('üéØ Switch language called:', lang);
    setGlobalLanguage(lang);
  }, []);

  const t = translations[language];

  return {
    t,
    language,
    switchLanguage
  };
}